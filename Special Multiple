#include <bits/stdc++.h>
using namespace std;

string ltrim(const string &);
string rtrim(const string &);

string solve(int n) {
    queue<string> Q;
    Q.push("9");   // Start with "9"

    while (!Q.empty()) {
        string s = Q.front();
        Q.pop();

        // Convert string to number modulo n
        long long rem = 0;
        for (char c : s) {
            rem = (rem * 10 + (c - '0')) % n;
        }

        if (rem == 0) {
            return s;  // Found the smallest multiple
        }

        // Append '0' and '9'
        Q.push(s + "0");
        Q.push(s + "9");
    }

    return ""; // shouldn't reach here
}

int main() {
    ofstream fout(getenv("OUTPUT_PATH"));

    string t_temp;
    getline(cin, t_temp);

    int t = stoi(ltrim(rtrim(t_temp)));

    for (int t_itr = 0; t_itr < t; t_itr++) {
        string n_temp;
        getline(cin, n_temp);

        int n = stoi(ltrim(rtrim(n_temp)));

        string result = solve(n);

        fout << result << "\n";
    }

    fout.close();
    return 0;
}

string ltrim(const string &str) {
    string s(str);
    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );
    return s;
}

string rtrim(const string &str) {
    string s(str);
    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );
    return s;
}
