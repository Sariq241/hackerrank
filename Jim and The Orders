#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);

int parse_int(char*);

// --- Helper Definitions for Jim's Orders ---

// Structure to hold the customer ID and their order completion time
typedef struct {
    int id;          
    long completion;  
} OrderInfo;


int compareOrders(const void* a, const void* b) {
    OrderInfo* o1 = (OrderInfo*)a;
    OrderInfo* o2 = (OrderInfo*)b;

    
    if (o1->completion != o2->completion) {
        
        if (o1->completion > o2->completion) return 1;
        if (o1->completion < o2->completion) return -1;
    }

   
    return o1->id - o2->id;
}


int* jimOrders(int orders_rows, int orders_columns, int** orders, int* result_count) {
   
    OrderInfo* arr = (OrderInfo*)malloc(sizeof(OrderInfo) * orders_rows);
    if (arr == NULL) {
        *result_count = 0;
        return NULL;
    }
    
    
    for (int i = 0; i < orders_rows; i++) {
        arr[i].id = i + 1; 
         
        arr[i].completion = (long)orders[i][0] + (long)orders[i][1]; 
    }

    
    qsort(arr, orders_rows, sizeof(OrderInfo), compareOrders);

    
    int* result = (int*)malloc(sizeof(int) * orders_rows);
    if (result == NULL) {
        free(arr);
        *result_count = 0;
        return NULL;
    }
    
    for (int i = 0; i < orders_rows; i++) {
        result[i] = arr[i].id;
    }

    
    free(arr);
    *result_count = orders_rows;
    return result;
}

int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    char* n_line = readline();
    int n = parse_int(ltrim(rtrim(n_line)));
    free(n_line);

    int** orders = malloc(n * sizeof(int*));

    for (int i = 0; i < n; i++) {
        *(orders + i) = malloc(2 * (sizeof(int)));

        char* order_line = readline();
        char** orders_item_temp = split_string(rtrim(order_line));

        for (int j = 0; j < 2; j++) {
            int orders_item = parse_int(*(orders_item_temp + j));
            *(*(orders + i) + j) = orders_item;
        }
        
        // Clean up temporary string allocations
        free(orders_item_temp);
        free(order_line);
    }

    int result_count;
    int* result = jimOrders(n, 2, orders, &result_count);

    for (int i = 0; i < result_count; i++) {
        fprintf(fptr, "%d", *(result + i));

        if (i != result_count - 1) {
            fprintf(fptr, " ");
        }
    }

    fprintf(fptr, "\n");

    // Clean up all dynamically allocated memory
    for(int i = 0; i < n; i++) {
        free(orders[i]);
    }
    free(orders);
    free(result);

    fclose(fptr);

    return 0;
}

// The definitions for readline, ltrim, rtrim, split_string, and parse_int 
// functions are assumed to be correctly appended here. 
// (They were omitted here for brevity, but are included in the complete solution file.)

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;

        data = realloc(data, alloc_length);

        if (!data) {
            data = NULL;
            break;
        }
    }

    if (data && data_length > 0 && data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';

        data = realloc(data, data_length);

        if (!data) {
            data = NULL;
        }
    } else if (data) {
        data = realloc(data, data_length + 1);

        if (!data) {
            data = NULL;
        } else {
            data[data_length] = '\0';
        }
    }

    return data;
}

char* ltrim(char* str) {
    if (!str) {
        return NULL;
    }

    if (!*str) {
        return str;
    }

    while (*str != '\0' && isspace(*str)) {
        str++;
    }

    return str;
}

char* rtrim(char* str) {
    if (!str) {
        return NULL;
    }

    if (!*str) {
        return str;
    }

    char* end = str + strlen(str) - 1;

    while (end >= str && isspace(*end)) {
        end--;
    }

    *(end + 1) = '\0';

    return str;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");

    int spaces = 0;

    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);

        if (!splits) {
            return NULL;
        }

        splits[spaces - 1] = token;

        token = strtok(NULL, " ");
    }

    return splits;
}

int parse_int(char* str) {
    char* endptr;
    long value = strtol(str, &endptr, 10);

    if (endptr == str || (*endptr != '\0' && !isspace(*endptr))) {
        fprintf(stderr, "Error: Invalid integer format or out of range for: %s\n", str);
        exit(EXIT_FAILURE);
    }

    return (int)value;
}
