#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Function prototypes (as provided in your original code)
char* readline();
char* ltrim(char*);
char* rtrim(char*);
int parse_int(char*);

/*
 * Complete the 'winningLotteryTicket' function below.
 *
 * The function is expected to return a LONG_INTEGER.
 * The function accepts STRING_ARRAY tickets as parameter.
 */
long winningLotteryTicket(int tickets_count, char** tickets) {
    // Array to store the frequency of each possible 10-bit mask (2^10 = 1024)
    int freq[1 << 10] = {0};
    
    // The mask where all 10 bits (for digits 0-9) are set: 1023
    const int fullMask = (1 << 10) - 1;

    // 1. Calculate the frequency of each unique digit-set mask
    for (int i = 0; i < tickets_count; i++) {
        int mask = 0;
        for (int j = 0; tickets[i][j] != '\0'; j++) {
            int digit = tickets[i][j] - '0';
            // Set the bit corresponding to the digit in the mask
            mask |= (1 << digit);
        }
        freq[mask]++;
    }
    
    // Use long long for the accumulator to prevent potential overflow
    long long ans = 0;

    // 2. Count the winning pairs by iterating over all unique pairs of masks (i, j)
    for (int i = 0; i <= fullMask; i++) {
        for (int j = i; j <= fullMask; j++) {
            
            // CRITICAL CORRECTION: Check the winning condition: (i OR j) == fullMask
            if ((i | j) == fullMask) {
                
                // Case 1: The two masks are the same (i == j)
                if (i == j) {
                    // Number of unordered pairs: nC2 = n * (n - 1) / 2
                    ans += (1LL * freq[i] * (freq[i] - 1)) / 2;
                } 
                // Case 2: The two masks are different (i != j)
                else {
                    // Number of pairs: freq[i] * freq[j]
                    ans += 1LL * freq[i] * freq[j];
                }
            }
        }
    }
    
    // CRITICAL CORRECTION: Return the final count.
    return (long)ans;
}

// ----------------------------------------------------
// MAIN FUNCTION (Program Entry Point)
// ----------------------------------------------------
int main()
{
    // The main function is necessary for compilation and linking
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    // Assuming the input reading logic works
    int n = parse_int(ltrim(rtrim(readline())));

    char** tickets = malloc(n * sizeof(char*));

    for (int i = 0; i < n; i++) {
        char* tickets_item = readline();
        *(tickets + i) = tickets_item;
    }

    long result = winningLotteryTicket(n, tickets);

    fprintf(fptr, "%ld\n", result);

    fclose(fptr);

    return 0;
}

// ----------------------------------------------------
// HELPER FUNCTION IMPLEMENTATIONS
// ----------------------------------------------------

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;

        data = realloc(data, alloc_length);

        if (!data) {
            data = '\0';
            break;
        }
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';

        data = realloc(data, data_length);

        if (!data) {
            data = '\0';
        }
    } else {
        data = realloc(data, data_length + 1);

        if (!data) {
            data = '\0';
        } else {
            data[data_length] = '\0';
        }
    }

    return data;
}

char* ltrim(char* str) {
    if (!str) {
        return '\0';
    }

    if (!*str) {
        return str;
    }

    while (*str != '\0' && isspace(*str)) {
        str++;
    }

    return str;
}

char* rtrim(char* str) {
    if (!str) {
        return '\0';
    }

    if (!*str) {
        return str;
    }

    char* end = str + strlen(str) - 1;

    while (end >= str && isspace(*end)) {
        end--;
    }

    *(end + 1) = '\0';

    return str;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);

    if (endptr == str || *endptr != '\0') {
        exit(EXIT_FAILURE);
    }

    return value;
}
